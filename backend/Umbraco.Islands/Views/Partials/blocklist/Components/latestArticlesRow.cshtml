@inherits UmbracoViewPage<BlockListItem>
@using Umbraco.Cms.Core.Models.Blocks
@using Clean.Core.Extensions
@using Clean.Core.Helpers

@{
    var row = Model.Content as LatestArticlesRow;
    var settings = Model.Settings as LatestArticlesRowSettings;
    if (settings?.Hide ?? false) { return; }

    var spacingClasses = "";
    if (Model.Settings is ISpacingProperties spacing)
    {
        spacingClasses = SpacingHelper.GetSpacingClasses(spacing.PaddingTop, spacing.PaddingBottom, spacing.PaddingLeft, spacing.PaddingRight, spacing.MarginTop, spacing.MarginBottom, spacing.MarginLeft, spacing.MarginRight);
    }

    var pageSize = row.PageSize;
    var pageNumber = QueryStringHelper.GetIntFromQueryString(Context.Request.Query, "page", 1);
    var allArticles = row.ArticleList.Children<Article>().Where(x => x.IsVisible()).OrderByDescending(x => x.ArticleDate) ?? Enumerable.Empty<Article>();
    var pageOfArticles = allArticles.Skip((pageNumber - 1) * pageSize).Take(pageSize);
    var totalItemCount = allArticles.Count();
    var pageCount = totalItemCount > 0 ? Math.Ceiling((double)totalItemCount / pageSize) : 1;
}

@{
    var content = new {
        articles = pageOfArticles.Select(x => new { x.Name, x.Subtitle })
    };
    var contentJson = Newtonsoft.Json.JsonConvert.SerializeObject(content);
}

<div class="react-component" data-component="BlogListing" data-content='@Html.Raw(contentJson)'></div>

<div class="row clearfix @(spacingClasses)">
    <div class="col-md-12 column">
        @foreach (var article in pageOfArticles)
        {
            var author = article.Author;
            bool.TryParse(article.Value<string>("showFullArticleOnListPage", fallback: Fallback.ToAncestors), out var showFullArticleOnListPage);
<div class="react-component" data-component="BlogListing" data-content='@Html.Raw(contentJson)'></div>
            <div class="post-preview">
                <a href="@article.Url()">
                    <h2 class="post-title">
                        @(!string.IsNullOrWhiteSpace(article.Title) ? article.Title : article.Name)
                    </h2>
                    <div class="react-component" data-component="BlogListing" data-content='@Html.Raw(contentJson)'></div>
                    @if (!string.IsNullOrWhiteSpace(article.Subtitle))
                    {
                        <h3 class="post-subtitle">@article.Subtitle</h3>
                    }
                </a>
                <p class="post-meta @(showFullArticleOnListPage ? "mb-0" : "")">
                    @Umbraco.GetDictionaryValue("Article.Posted")
                    @Umbraco.GetDictionaryValue("Article.By")@Html.Raw("&nbsp;")@author.Name
                    @Umbraco.GetDictionaryValue("Article.On") @article.ArticleDate.ToString("MMMM dd, yyyy")
                </p>
                <div class="react-component" data-component="BlogListing" data-content='@Html.Raw(contentJson)'></div>
                @if (showFullArticleOnListPage && article.Categories != null && article.Categories.Any())
                {
                    <span class="mt-2 d-block"></span>
                    @foreach (var category in article.Categories.Select(x => x.Name).OrderBy(y => y))
                    {
                        <span class="badge rounded-pill bg-light text-dark border-dark border-5">@category</span>
                    }

                }
            </div>

            @if (showFullArticleOnListPage)
            {
                <div class="row">
                    <div class="col-12">
                        @Html.GetBlockListHtml(article.ContentRows)
                    </div>
                    <div class="react-component" data-component="BlogListing" data-content='@Html.Raw(contentJson)'></div>
                </div>
            }

            <hr>
        }

        <div class="react-component" data-component="BlogListing" data-content='@Html.Raw(contentJson)'></div>

        @if (row.ShowPagination)
        {
            @await Component.InvokeAsync("Pagination", new { totalItems = totalItemCount, url = row.ArticleList.Url(), pageNumber = pageNumber, pageSize = pageSize })
        }
    </div>
</div>

